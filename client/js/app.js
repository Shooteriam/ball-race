class BallRaceApp {
  constructor() {
    this.socket = null;
    this.gameState = {
      currentScreen: "main",
      playerBalls: 0,
      currentGame: null,
      players: [],
    };
    this.playerData = null;
    this.gameData = null;
    this.isAdmin = false;
    this.hasJoinedLobby = false;
    this.gameRenderer = null;
    this.gameTimer = null;

    this.init();
  }

  async init() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand();

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const initData = window.Telegram.WebApp.initDataUnsafe;
        this.playerData = {
          id: initData.user?.id || Math.random().toString(36).substr(2, 9),
          username:
            initData.user?.username || initData.user?.first_name || "Player",
          firstName: initData.user?.first_name || "Unknown",
          isAdmin: initData.user?.id === 123456789, // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
        };

        this.isAdmin = this.playerData.isAdmin;
      } else {
        // –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        this.playerData = {
          id: "dev_admin",
          username: "Admin",
          firstName: "Admin",
          isAdmin: true, // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ –∞–¥–º–∏–Ω
        };
        this.isAdmin = true;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
      if (this.isAdmin) {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === "loading") {
          document.addEventListener("DOMContentLoaded", () => {
            this.createAdminPanel();
          });
        } else {
          this.createAdminPanel();
        }
      }

      await this.connectToServer();
      this.setupEventListeners();
      this.showScreen("main");
    } catch (error) {
      console.error("Initialization error:", error);
      this.showError("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
    }
  }

  createAdminPanel() {
    const mainScreen = document.getElementById("mainScreen");

    if (!mainScreen) {
      console.error("Main screen not found");
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    const adminPanel = document.createElement("div");
    adminPanel.className = "admin-section";
    adminPanel.innerHTML = `
      <div class="admin-card">
        <h3>üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h3>
        <div class="admin-controls">
          <button id="force-start-btn" class="btn btn-danger">
            üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å–µ–π—á–∞—Å!
          </button>
          <button id="reset-game-btn" class="btn btn-warning">
            üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É
          </button>
        </div>
        <div class="admin-info">
          <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span id="admin-status">–ì–æ—Ç–æ–≤</span></p>
          <p><strong>–ò–≥—Ä–æ–∫–æ–≤:</strong> <span id="admin-players">0</span></p>
        </div>
      </div>
    `;

    // –í—Å—Ç–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ—Å–ª–µ –ª–æ–±–±–∏
    const lobbySection = mainScreen.querySelector(".lobby-section");
    if (lobbySection) {
      lobbySection.insertAdjacentElement("afterend", adminPanel);
    } else {
      mainScreen.appendChild(adminPanel);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const forceStartBtn = document.getElementById("force-start-btn");
    const resetGameBtn = document.getElementById("reset-game-btn");

    if (forceStartBtn) {
      forceStartBtn.addEventListener("click", () => {
        this.forceStartGame();
      });
    }

    if (resetGameBtn) {
      resetGameBtn.addEventListener("click", () => {
        this.resetGame();
      });
    }
  }

  forceStartGame() {
    if (this.socket && this.isAdmin) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
      this.socket.emit("admin:forceStart", {
        adminId: this.playerData.id,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
      const statusElement = document.getElementById("admin-status");
      if (statusElement) {
        statusElement.textContent = "–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...";
        statusElement.style.color = "var(--warning-color)";
      }

      // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è
      const forceBtn = document.getElementById("force-start-btn");
      if (forceBtn) {
        forceBtn.disabled = true;
        forceBtn.textContent = "‚è≥ –ó–∞–ø—É—Å–∫...";

        setTimeout(() => {
          forceBtn.disabled = false;
          forceBtn.textContent = "üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å–µ–π—á–∞—Å!";
        }, 3000);
      }
    }
  }

  resetGame() {
    if (this.socket && this.isAdmin) {
      this.socket.emit("admin:resetGame", {
        adminId: this.playerData.id,
      });

      const statusElement = document.getElementById("admin-status");
      if (statusElement) {
        statusElement.textContent = "–°–±—Ä–æ—Å –∏–≥—Ä—ã...";
        statusElement.style.color = "var(--danger-color)";
      }
    }
  }

  async connectToServer() {
    try {
      this.socket = io();

      this.socket.on("connect", () => {
        console.log("Connected to server");
        // –ù–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –ª–æ–±–±–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
      });

      this.socket.on("disconnect", () => {
        console.log("Disconnected from server");
        this.showError("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
      });

      this.socket.on("lobby-update", (data) => {
        console.log("Lobby update received:", data);
        this.updateLobby(data);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (this.isAdmin) {
          const playersElement = document.getElementById("admin-players");
          if (playersElement) {
            playersElement.textContent = data.totalPlayers;
          }
        }
      });

      this.socket.on("next-game-time", (nextGameTime) => {
        console.log("Next game time received:", nextGameTime);
        this.updateGameTimer(nextGameTime);
      });

      this.socket.on("game-started", (data) => {
        this.startGame(data);

        if (this.isAdmin) {
          const statusElement = document.getElementById("admin-status");
          if (statusElement) {
            statusElement.textContent = "–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞";
            statusElement.style.color = "var(--success-color)";
          }
        }
      });

      this.socket.on("game-ended", (data) => {
        this.endGame(data);

        if (this.isAdmin) {
          const statusElement = document.getElementById("admin-status");
          if (statusElement) {
            statusElement.textContent = "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞";
            statusElement.style.color = "var(--primary-color)";
          }
        }
      });

      this.socket.on("game-state", (data) => {
        this.updateGameState(data);
      });

      // –ê–¥–º–∏–Ω-—Å–æ–±—ã—Ç–∏—è
      this.socket.on("admin:gameForceStarted", () => {
        if (this.isAdmin) {
          const statusElement = document.getElementById("admin-status");
          if (statusElement) {
            statusElement.textContent = "–ò–≥—Ä–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞";
            statusElement.style.color = "var(--success-color)";
          }
        }
      });

      this.socket.on("admin:gameReset", () => {
        if (this.isAdmin) {
          const statusElement = document.getElementById("admin-status");
          if (statusElement) {
            statusElement.textContent = "–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞";
            statusElement.style.color = "var(--primary-color)";
          }

          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–±–±–∏
          this.showScreen("lobby");
        }
      });

      this.socket.on("admin:error", (data) => {
        if (this.isAdmin) {
          this.showError(`–ê–¥–º–∏–Ω –æ—à–∏–±–∫–∞: ${data.message}`);
        }
      });
    } catch (error) {
      console.error("Socket connection error:", error);
      this.showError("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
    }
  }

  setupEventListeners() {
    // Ball count slider
    const ballCountSlider = document.getElementById("ballCount");
    const ballCountDisplay = document.getElementById("ballCountDisplay");

    ballCountSlider.addEventListener("input", (e) => {
      ballCountDisplay.textContent = e.target.value;
    });

    // Buy balls button
    document.getElementById("buyBallsBtn").addEventListener("click", () => {
      this.buyBalls();
    });

    // Game controls
    document.getElementById("backToLobbyBtn").addEventListener("click", () => {
      this.showScreen("main");
    });

    document.getElementById("newGameBtn").addEventListener("click", () => {
      this.showScreen("main");
    });

    // Share button (if exists)
    const shareBtn = document.getElementById("shareResultBtn");
    if (shareBtn) {
      shareBtn.addEventListener("click", () => {
        this.shareGame();
      });
    }

    // Back to main button (if exists)
    const backToMainBtn = document.getElementById("backToMainBtn");
    if (backToMainBtn) {
      backToMainBtn.addEventListener("click", () => {
        this.showScreen("main");
      });
    }
  }

  // Game methods
  startGame(gameData) {
    console.log("Game started:", gameData);

    // Initialize game renderer
    if (!this.gameRenderer) {
      this.gameRenderer = new GameRenderer("gameCanvas");
    }

    this.gameRenderer.initGame(gameData);

    // Show game screen
    this.showScreen("game");

    // Update UI
    const gameStatus = document.getElementById("gameStatus");
    if (gameStatus) {
      gameStatus.textContent = "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!";
    }

    // Clear any existing timer
    if (this.gameTimer) {
      clearInterval(this.gameTimer);
    }

    // Start game timer
    this.startGameTimeCounter(gameData.startTime);
  }

  endGame(gameData) {
    console.log("Game ended:", gameData);

    // Stop renderer
    if (this.gameRenderer) {
      this.gameRenderer.stopRenderLoop();
    }

    // Clear game timer
    if (this.gameTimer) {
      clearInterval(this.gameTimer);
    }

    // Show results
    this.showGameResults(gameData);
  }

  updateGameState(gameData) {
    if (this.gameRenderer) {
      this.gameRenderer.updateGame(gameData);
    }
  }

  startGameTimeCounter(startTime) {
    const gameTimeElement = document.getElementById("gameTime");
    if (!gameTimeElement) return;

    this.gameTimer = setInterval(() => {
      const elapsed = Math.floor((Date.now() - startTime) / 1000);
      const minutes = Math.floor(elapsed / 60);
      const seconds = elapsed % 60;
      gameTimeElement.textContent = `${minutes}:${seconds
        .toString()
        .padStart(2, "0")}`;
    }, 1000);
  }

  showGameResults(gameData) {
    const resultsScreen = document.getElementById("resultsScreen");
    const winnerCard = document.getElementById("winnerCard");
    const winnerInfo = document.getElementById("winnerInfo");
    const resultsList = document.getElementById("resultsList");

    if (!resultsScreen || !winnerCard || !winnerInfo || !resultsList) {
      console.error("Results screen elements not found");
      return;
    }

    // Show winner
    if (gameData.winner) {
      winnerInfo.innerHTML = `
        <h4>üèÜ ${gameData.winner.playerName}</h4>
        <p>–í—Ä–µ–º—è: ${(
          (gameData.winner.finishTime - gameData.startTime) /
          1000
        ).toFixed(2)}—Å</p>
      `;
    } else {
      winnerInfo.innerHTML = `
        <h4>‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ</h4>
        <p>–ù–∏–∫—Ç–æ –Ω–µ –¥–æ–±—Ä–∞–ª—Å—è –¥–æ —Ñ–∏–Ω–∏—à–∞</p>
      `;
    }

    // Show all results
    if (gameData.results && gameData.results.length > 0) {
      resultsList.innerHTML = gameData.results
        .map(
          (result, index) => `
        <div class="result-item">
          <span class="position">${index + 1}</span>
          <span class="player-name">${result.playerName}</span>
          <span class="result-status">
            ${
              result.finished
                ? `‚úÖ ${(
                    (result.finishTime - gameData.startTime) /
                    1000
                  ).toFixed(2)}—Å`
                : "‚ùå –ù–µ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª"
            }
          </span>
        </div>
      `
        )
        .join("");
    } else {
      resultsList.innerHTML = "<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö</p>";
    }

    // Show results screen
    this.showScreen("results");
  }

  showScreen(screenName) {
    // Hide all screens
    document.querySelectorAll(".screen").forEach((screen) => {
      screen.classList.remove("active");
    });

    // Show target screen - –¥–ª—è main —ç–∫—Ä–∞–Ω–∞ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º, –æ–Ω –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω
    if (screenName === "main") {
      document.getElementById("mainScreen").classList.add("active");
    } else {
      document.getElementById(screenName + "Screen").classList.add("active");
    }
    this.gameState.currentScreen = screenName;
  }

  updateLobby(data) {
    document.getElementById("playerCount").textContent = data.totalPlayers;

    const playerList = document.getElementById("playerList");

    if (data.totalPlayers === 0) {
      playerList.innerHTML = `
        <div class="empty-lobby">
          <p>üë• –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...</p>
          <p>–ö—É–ø–∏—Ç–µ —à–∞—Ä–∏–∫–∏, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ!</p>
        </div>
      `;
    } else {
      playerList.innerHTML = "";
      data.players.forEach((player) => {
        const playerElement = document.createElement("div");
        playerElement.className = "player-item";
        playerElement.innerHTML = `
          <span class="player-name">${player.username}</span>
          <span class="player-balls">${player.ballCount} üé±</span>
        `;
        playerList.appendChild(playerElement);
      });
    }
  }

  updateGameTimer(nextGameTime) {
    const updateTimer = () => {
      const now = Date.now();
      const timeLeft = Math.max(0, nextGameTime - now);

      if (timeLeft === 0) {
        document.getElementById("gameTimer").textContent =
          "‚ö° –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!";
        document.getElementById("gameTimer").classList.add("pulse");
        return;
      }

      const minutes = Math.floor(timeLeft / 60000);
      const seconds = Math.floor((timeLeft % 60000) / 1000);

      document.getElementById("gameTimer").textContent = `${minutes
        .toString()
        .padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;

      setTimeout(updateTimer, 1000);
    };

    updateTimer();
  }

  startGameTimerUpdate() {
    // Fetch game info every 30 seconds
    const fetchGameInfo = async () => {
      try {
        const response = await fetch("/api/game-info");
        const data = await response.json();
        this.updateGameTimer(data.nextGameTime);
      } catch (error) {
        console.error("Failed to fetch game info:", error);
      }
    };

    fetchGameInfo();
    setInterval(fetchGameInfo, 30000);
  }

  async buyBalls() {
    const ballCount = parseInt(document.getElementById("ballCount").value);
    const buyButton = document.getElementById("buyBallsBtn");

    buyButton.classList.add("loading");
    buyButton.disabled = true;

    try {
      if (window.Telegram?.WebApp) {
        // Use Telegram Stars for payment
        await this.processTelegramStarsPayment(ballCount);
      } else {
        // Simulate payment for development
        await this.simulatePayment(ballCount);
      }
    } catch (error) {
      console.error("Payment failed:", error);
      this.showNotification("–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã", "error");
    } finally {
      buyButton.classList.remove("loading");
      buyButton.disabled = false;
    }
  }

  async processTelegramStarsPayment(ballCount) {
    const tg = window.Telegram.WebApp;

    // TODO: Implement actual Telegram Stars payment
    // For now, simulate the payment process
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        // Simulate payment success
        this.completePurchase(ballCount);
        resolve();
      }, 2000);
    });
  }

  async simulatePayment(ballCount) {
    const response = await fetch("/api/buy-balls", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        userId: this.playerData.id,
        username: this.playerData.username,
        ballCount: ballCount,
        paymentData: { simulated: true },
      }),
    });

    const result = await response.json();

    if (result.success) {
      this.completePurchase(ballCount);
    } else {
      throw new Error(result.error);
    }
  }

  completePurchase(ballCount) {
    this.gameState.playerBalls += ballCount;
    this.showNotification(`–ö—É–ø–ª–µ–Ω–æ ${ballCount} —à–∞—Ä–∏–∫–æ–≤! üé±`, "success");

    // Update UI
    document.getElementById("ballCount").value = 10;
    document.getElementById("ballCountDisplay").textContent = "10";

    // Update player ball count display
    const playerBallCount = document.getElementById("playerBallCount");
    if (playerBallCount) {
      playerBallCount.textContent = this.gameState.playerBalls;
    }

    // Join lobby after first purchase
    if (!this.hasJoinedLobby) {
      this.joinLobby();
      this.hasJoinedLobby = true;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ª–æ–±–±–∏
      setTimeout(() => {
        this.showNotification("üéÆ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏!", "success");
      }, 1000);
    }
  }

  onGameStarted(gameData) {
    console.log("Game started:", gameData);
    this.gameState.currentGame = gameData;
    this.showScreen("game");
    this.showNotification("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! üèÅ", "success");

    // Initialize game renderer
    if (window.GameRenderer) {
      window.gameRenderer = new GameRenderer("gameCanvas");
      window.gameRenderer.initGame(gameData);
    }
  }

  onGameUpdate(gameData) {
    if (window.gameRenderer) {
      window.gameRenderer.updateGame(gameData);
    }

    // Update game time
    const gameTime = Math.floor(gameData.gameTime / 1000);
    const minutes = Math.floor(gameTime / 60);
    const seconds = gameTime % 60;
    document.getElementById("gameTime").textContent = `${minutes
      .toString()
      .padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;

    // Update total balls count
    document.getElementById(
      "totalBalls"
    ).textContent = `–í—Å–µ–≥–æ —à–∞—Ä–∏–∫–æ–≤: ${gameData.balls.length}`;
  }

  onGameEnded(resultData) {
    console.log("Game ended:", resultData);
    this.gameState.currentGame = null;

    // Show results
    document.getElementById("winnerName").textContent =
      resultData.winner.username;
    this.showScreen("results");

    // Show celebration
    this.showNotification(
      `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${resultData.winner.username}!`,
      "success"
    );

    // Show main button for Telegram
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.MainButton.show();
    }
  }

  shareGame() {
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      const message = `üèÅ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Ball Race! –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –≥–æ–Ω–∫–∞ —à–∞—Ä–∏–∫–æ–≤ –≤ Telegram!`;

      tg.sendData(
        JSON.stringify({
          action: "share_game",
          message: message,
        })
      );
    } else {
      // Fallback for development
      if (navigator.share) {
        navigator.share({
          title: "Ball Race",
          text: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Ball Race!",
          url: window.location.href,
        });
      }
    }
  }

  showNotification(message, type = "info") {
    const notification = document.createElement("div");
    notification.className = `notification ${type}`;
    notification.textContent = message;

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.remove();
    }, 3000);
  }

  showError(message) {
    this.showNotification(message, "error");
    console.error("App Error:", message);
  }

  joinLobby() {
    if (this.socket && this.playerData) {
      this.socket.emit("join-lobby", {
        userId: this.playerData.id,
        username: this.playerData.username,
      });
    }
  }
}

// Initialize app when page loads
document.addEventListener("DOMContentLoaded", () => {
  window.ballRaceApp = new BallRaceApp();
});
